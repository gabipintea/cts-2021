Code Review

Problems
1 Formatting
	- public static double calculate(Account[] 	accounts); bad indentation of the entire method
	- TAB spacing and whitespaces mixed across the entire code
		e.g. attributes declaration, for	(int	i=0;i<accounts.length;i++)
	- inconsistent use of spacing in declarations, enumerations, between operands
		e.g. if(value<0), int vb = 10; double totalFee=0.0; 
			 daysActive,account_Type; 
			 return "Loan: "+this.loan_value+"; i<accounts.length; ...==Account.PREMIUM||account.account_Type...
	- inconsistent use of 'this' keyword
		e.g. this.loan_value and return loan_value; or rate and return this.rate; or to_string() return statement
	- inconsistent and mixed use of bracket positions
		e.g. - either missing for one instruction
			
			 if(value<0) 
			 	throw new Exception();
			 	
			 - or opening bracket position style (Java-like vs C/C++ -like) mixed across code
			 
			 public void print() {
			 	...
			 }
			 
			 public static double calculate(Account[] 	accounts)
			 {
			 	...
			 }
			 
			 for	(int	i=0;i<accounts.length;i++)	{
			 	...
			 }
			 
			 
			 else
			 {
				 loan_value = value;
			 }
			 
			 
			 
		
2 Naming conventions
	- mixed naming ways
		e.g. loan_value, daysActive, account_Type, to_string()
	- non-suggestive names
		e.g. loan(), setValue(), print(), calculate(), temp
	- Meaningful Names
		- Use Intention-Revealing Names
			e.g. getLoan() instead of loan()
		- Pick one word per concept
			e.g. getLoan() and getRate() for getters instead of just loan()
		- Use Solution/Problem Domanin Names
			e.g. computeTotalFees() instead of calculate()
			
3 Classes
	- Should be small - here are ~66 lines
	- Single Responsability - do not calculate fees in Account class
	
4 Functions
	- Should be small - here are ~12 lines
	- Do one Thing (KISS) - e.g. getters also printing
	- DRY - e.g. setValue() for loan_value repeating in constructor
			   getMonthlyRate() function duplicated across all classes, as requested by lead
	- YAGNI - e.g. print() function
	- Use wrapper classes instead of primitives as parameters, as much as possible
		e.g. public Account(double value, double rate, int account_Type);
	
5 Size of instructions
	e.g. totalFee+=.0125	*	(	//	1.25%	broker's	fee
			account.loan_value*Math.pow(account.rate,(account.daysActive/365)) - account.loan_value);
		return "Loan: "+this.loan_value+"; rate: "+this.rate+"; days active:"+daysActive+"; Type: "+account_Type+";";
		
6 Comments, hard-coding and grouping
	- Explain yourself in code
		e.g. //must have method - the lead has requested it in all classes
			 //	1.25%	broker's	fee
	- Further explanations for readability of the functions may be a case of function splitting
			//	1.25%	broker's	fee
		
	- No hard coding of values. Use constants/configuration values instead
		e.g. int temp = 365; totalFee+=.0125	*	(	//	1.25%	broker's	fee ...
		
	- Group similar values under enums, instead of int constants
		e.g. int STANDARD=0,BUDGET=1,PREMIUM=2,SUPER_PREMIUM=3;

7 Exceptions
	- Use standard and relevant exceptions - e.g. value<0 Exception thrown
	- Don't ignore exceptions - treat them all
	
	
8 Fundamentals
	- Security and privileges
		e.g. public attributes, public methods, no private/protected members, no complete set of accessor methods

9 Input validation
	- Validation for all parameters
		e.g. rate, account_type in constructor
	- Usage of wrappers instead of primitives