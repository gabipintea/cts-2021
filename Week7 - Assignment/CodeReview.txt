Code Review with negative examples from the original Account.java

1 Formatting
	- Indentation
		e.g. calculate()
	- TAB spacing and white-spaces should not be mixed across the entire code
		e.g. attributes declaration, for	(int	i=0;i<accounts.length;i++)
	- Spacing should be consistent in declarations, enumerations, between operands, between rows (readability)
		e.g. if(value<0), int vb = 10; double totalFee=0.0; 
			 daysActive,account_Type; 
			 return "Loan: "+this.loan_value+"; i<accounts.length; ...==Account.PREMIUM||account.account_Type...
	- Usage of 'this' keyword should be consistent across the entire code
		e.g. this.loan_value and return loan_value; or rate and return this.rate; or to_string() return statement
	- Bracket appearance and positioning style should be consistent across the entire code
		e.g. - either missing for one instruction
			
				 if(value<0) 
				 	throw new Exception();
			 	
			 - or opening bracket position style (Java-like vs C/C++ -like)
			 
				 public void print() {
				 	...
				 }
				 
				 public static double calculate(Account[] 	accounts)
				 {
				 	...
				 }
				 
				 for	(int	i=0;i<accounts.length;i++)	{
				 	...
				 }
				 
				 
				 else
				 {
					 loan_value = value;
				 }
			 
			 
			 
		
2 Naming conventions
	- Usage of only one naming convention
		e.g. loan_value, daysActive, account_Type, to_string()
	- Suggestive names
		e.g. rate,  loan(), setValue(), print(), calculate(), temp
	- Meaningful Names
		- Use Intention-Revealing Names
			e.g. getLoan() instead of loan()
		- Pick one word per concept
			e.g. getLoan() and getRate() for getters instead of just loan()
		- Use Solution/Problem Domain Names
			e.g. computeTotalFee() instead of calculate()
			
3 Classes
	- Single Responsibility and class relevance + KISS - let services make financial computations
	
4 Functions
	- Should be small - e.g. 12 lines of code in the biggest function here
	- Do one Thing (KISS) - e.g. getters also printing
	- DRY - e.g. setValue() for loan_value repeating in constructor
			   getMonthlyRate() function duplicated across all classes, as requested by lead
	- YAGNI - e.g. print() function		
	- Better override toString() than creating a to_string()
	
5 Size of instructions and SRP
	e.g. totalFee+=.0125	*	(	//	1.25%	broker's	fee
			account.loan_value*Math.pow(account.rate,(account.daysActive/365)) - account.loan_value);
		return "Loan: "+this.loan_value+"; rate: "+this.rate+"; days active:"+daysActive+"; Type: "+account_Type+";";
		
6 Comments, hard-coding and grouping
	- Explain yourself in code
		e.g. //must have method - the lead has requested it in all classes
			 //	1.25%	broker's	fee
	- Further explanations for readability of the functions may be a case of function splitting
			//	1.25%	broker's	fee
		
	- No hard-coding of values. Use constants/configuration values instead
		e.g. int temp = 365; totalFee+=.0125	*	(	//	1.25%	broker's	fee ...
		
	- Group similar values under enums, instead of int constants
		e.g. int STANDARD=0,BUDGET=1,PREMIUM=2,SUPER_PREMIUM=3;

7 Exceptions
	- Favor the use of standard exceptions but relevant messages and extends
		e.g. value<0 Exception thrown
	
	
8 Fundamentals
	- Security and privileges
		e.g. public attributes, public methods, no private/protected members, no complete set of accessing methods

9 Input validation
	- Validation for parameters
	- Usage of wrappers instead of primitives for input parameters
		e.g. public Account(double value, double rate, int account_Type);
	
	
Phase 1 - Formatting and Naming Conventions
- Indentation
- Brackets Java-like styling
- TAB and whitespaces and row spacing
- Rename everything lowerCamelCase
- Add 'this' keyword everywhere
- Rename rate to a more suggestive interestRate
- Rename temp to a more suggestive YEAR_DAYS, make it static constant and use it in computation
- Rename loan() to getLoanValue()
- Rename setValue() to setLoanValue()
- Rename calculate() to computeTotalFee()
- Override toString() instead of using to_string() and arrange the concatenations to be readable
- Remove hard-coded values aka "magic numbers" and associated comments (broker's fee)

Phase 2 - KISS, DRY, YAGNI, SRP, Exceptions, Validations
- Remove useless print(), use toString()
- Remove useless prints in getters, use toString()
- Use setLoanValue() in constructor also
- Use standard exception UnsupportedOperationException as base class for specific Exceptions with relevant message
- Group types in enum and in this way avoid erroneous int input for account type
- Use BROKER_FEE as a member of accountType for easily adding new types and avoid changing if conditions in computeTotalFee()
- Use wrappers instead of primitives for parameters
- Add all attributes to input parameters of the constructor
- Compute fee for the current instance only => computeFee()
- Split the complex math in different functions => computeInterest()

Phase 3 - DIP and Services
- Move validations in ValidatorService
- Move financial computations and getMonthlyRate() in CreditService //TODO
- Use Dependency Inversion with CreditServiceInterface to stop instance dependence //TODO